<?xml version="1.0" encoding="utf-8" ?>
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<!-- 
	
	
	
	DO NOT MODIFY THIS FILE. 
	
	USE SITECORE PATCH CONFIGS TO CHANGE BEHAVIOR. 
	
	ANY CHANGES TO THIS FILE MAY BE OVERWRITTEN IN A FUTURE RELEASE
	
	
	
	-->
	<sitecore>
		<constellation>
			<!--
				AUTOMATIC VIEW PATH RESOLUTION
				
				Constellation supports convention over configuration for view paths when using Controller Rendering Definitions.
				
				use IViewPathResolver in your Constellation Controllers to automatically resolve the location of views based on 
				the current Rendering Definition. Constellation will analyse the Sitecore Content path to the Rendering Definition
				and attempt to find a matching View file in the equivalent folder within your Sitecore solution. Your Rendering folder
				depth can be arbitrary below the Helix folders within Sitecore, but your View must be in an equivalent folder on disk 
				for view resolution to work. Please review the examples below carefully to understand how it works.
				
				Note that it is possible to set independent view paths for each Helix level.
				
				
				Foundation Example:
				==================
				
				Foundation root path: /sitecore/layout/Renderings/Foundation/
				Definition path: /sitecore/layout/Renderings/Foundation/Navigation Components/Primary Navigation/Mega Menu 
				Foundation view path: ~/Areas/Foundation_{moduleName}/Views/
				Resolved view path: ~/Areas/Foundation_NavigationComponents/Views/PrimaryNavigation/MegaMenu.cshtml
				
				
				Feature Example:
				===============
				
				Feature root path: /sitecore/layout/Renderings/Feature/
				Definition path: /sitecore/layout/Renderings/Feature/People/Trading Card
				Feature view path: ~/Areas/Feature_{moduleName}/Views/
				Resolved view path: ~/Areas/Feature_People/Views/TradingCard.cshtml
				
				
				Project Example:
				===============
				
				Project root path: /sitecore/layout/Renderings/Project/
				Definition path: /sitecore/layout/Renderings/Project/Example Project/News/Short News List
				Project view path: ~/Areas/{moduleName}/Views/
				View Path: ~/Areas/ExampleProject/Views/News/ShortNewsList.cshtml
				
				
				Feature with Site Override:
				==========================
				
				Feature root path: /sitecore/layout/Rendering/Feature/
				Definition path: /sitecore/layout/Rendering/Feature/People/Trading Card
				Feature view path: ~/Areas/Feature_{moduleName}/Views/
				ALLOW SITE OVERRIDE SET TO TRUE!
				context hostname: www.uspresidents.com
				context site name: uspresidents
				Site override view path: ~/Areas/{siteName}/Views/{moduleName}
				Site's view path: ~/Areas/uspresidents/Views/People/TradingCard.cshtml
				
				
				If the Site view path above exists, this view will be used, otherwise, we fall back
				to the feature view path below.
				
				
				feature view path: ~/Areas/Feature_People/Views/TradingCard.cshtml
				
				VIEW PATH TOKENS
				The following tokens are valid when specifying the configuration settings:
				
				{moduleName} represents the folder immediately below /Foundation /Feature or /Project in the RenderingItemPathRoot.
				{siteName} resolves to Sitecore.Context.Site.Name.
				
				
				TROUBLESHOOTING
				* Check your Rendering Item root paths
				* Check your View root paths below
				* Check for spelling mistakes in Sitecore and on disk
				* Your Folder names in Sitecore can be human legible. Use spaces and Title casing.
				* The "Area" field in Controller Rendering Definitions will be ignored by ViewPathResolver.
				* ViewPathResolver will not check for the MVC "Shared" View folder.
				* If you create Renderings that only apply to a single Site,  treat the Site like a Project and name the Project folder identical
				to the site's "name" in the site config.
				
			-->

			<viewPathResolver
				foundationRenderingItemPathRoot="/sitecore/layout/Renderings/Foundation/"
				featureRenderingItemPathRoot="/sitecore/layout/Renderings/Feature/"
				projectRenderingItemPathRoot="/sitecore/layout/Renderings/Project/"
				foundationViewPath="~/Areas/Foundation_{moduleName}/Views/"
				featureViewPath="~/Areas/Feature_{moduleName}/Views/"
				projectViewPath="~/Areas/{moduleName}/Views/"
				allowSiteOverrides="true"
				siteOverrideViewPath="~/Areas/{siteName}/Views/{moduleName}/"
			/>
		</constellation>
		<pipelines>
			<mvc.getRenderer>
				<!--
				Get Controller Renderer
				Allows you to infer the controller name from the name of the Rendering Item (must be a Controller Rendering type Item)
				You do not have to set the Controller or Controller Action fields. It assumes "Index" for the action, and constructs
				the controller name from the name of the Rendering (attempts to turn the name into a valid C# class name).
				Direct replacement for Sitecore's default GetControllerRenderer, and is backwards compatible.
				-->
				<processor 
					patch:instead="*[@type='Sitecore.Mvc.Pipelines.Response.GetRenderer.GetControllerRenderer, Sitecore.Mvc']" 
					type="Constellation.Foundation.Mvc.Pipelines.GetRenderer.GetControllerRenderer, Constellation.Foundation.Mvc"
				/>

			</mvc.getRenderer>
			<mvc.renderRendering>
				<!-- 
				Generate Rendering Specific Cache Key
				Allows you to use the same controller and controller action on different Rendering Items that produce different HTML output.
				Direct replacement for Sitecore's default GenerateCacheKey pipeline processor.
				-->
				<processor
					patch:instead="*[@type='Sitecore.Mvc.Pipelines.Response.RenderRendering.GenerateCacheKey, Sitecore.Mvc']"
					type="Constellation.Foundation.Mvc.Pipelines.RenderRendering.GenerateRenderingSpecificCacheKey, Constellation.Foundation.Mvc"
					resolve="true"
				/>
				<!--
				Minify and Add Recorded HTML to Cache
				Uses WebMarkupMin by Andrey Taritsyn to attempt to minify the output before adding it to the cache and/or sending it to the Response.
				Can handle Javascript, CSS, HTML or any variation of the three. Note: Does not activate minification in Experience Editor modes.
				Direct replacement for Sitecore's default AddRecordedHtmlToCache.
				-->
				<processor
					patch:instead="*[@type='Sitecore.Mvc.Pipelines.Response.RenderRendering.AddRecordedHtmlToCache, Sitecore.Mvc']"
					type="Constellation.Foundation.Mvc.Pipelines.RenderRendering.MinifyAndAddRecordedHtmlToCache, Constellation.Foundation.Mvc"
				/>
			</mvc.renderRendering>
		</pipelines>
		<services>
			<!--
				Register IViewPathResolver with Dependency Injection
				-->
			<configurator type="Constellation.Foundation.Mvc.ServicesConfigurator, Constellation.Foundation.Mvc"/>
		</services>
	</sitecore>
</configuration>
